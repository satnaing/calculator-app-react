{"version":3,"sources":["hooks/useLocalStorage.js","App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","App","theme","setTheme","isDark","setIsDark","inputValue","setInputValue","calStr","setCalStr","useEffect","document","body","classList","add","remove","handleNum","e","val","target","innerText","includes","toString","className","onClick","id","onSubmit","preventDefault","x","replace","evaluate","toLocaleString","onChange","type","deleteInput","trim","slice","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e5597cb8.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport { evaluate } from \"mathjs\";\n\nfunction App() {\n  const [theme, setTheme] = useLocalStorage(\"dark-theme\", false);\n  const [isDark, setIsDark] = useState(theme);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [calStr, setCalStr] = useState(\"\");\n\n  useEffect(() => {\n    if (isDark) document.body.classList.add(\"dark-theme\");\n    else document.body.classList.remove(\"dark-theme\");\n  }, [isDark]);\n\n  const handleTheme = () => {\n    setIsDark(!isDark);\n    setTheme(!theme);\n  };\n\n  const handleInput = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleNum = (e) => {\n    const val = e.target.innerText;\n    const nums = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\"];\n    if (nums.includes(val.toString())) {\n      if (typeof inputValue === \"number\") {\n        setInputValue(val);\n        setCalStr(\"\");\n      } else {\n        setInputValue(inputValue + val);\n      }\n    } else {\n      setInputValue(` ${inputValue} ${val} `);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setCalStr(inputValue);\n    let x = inputValue.replace(/x/g, \"*\");\n    setInputValue(evaluate(x).toLocaleString());\n  };\n\n  const handleReset = () => {\n    setCalStr(\"\");\n    setInputValue(\"\");\n  };\n\n  const handleDelete = () => {\n    const deleteInput = inputValue.toString().trim().slice(0, -1);\n    setInputValue(deleteInput);\n    setCalStr(\"\");\n  };\n\n  return (\n    <div className=\"main container\">\n      <header>\n        <h1>calc</h1>\n        <div className=\"theme__container\" onClick={handleTheme}>\n          <i className=\"bx bx-sun\"></i>\n          <i\n            className={`bx ${isDark ? \"bx-toggle-right\" : \"bx-toggle-left\"}`}\n            id=\"theme-button\"\n          ></i>\n          <i className=\"bx bx-moon\"></i>\n        </div>\n      </header>\n\n      <form onSubmit={handleSubmit}>\n        <section className=\"input__container\">\n          <span>{calStr}</span>\n          <input\n            value={inputValue}\n            onChange={handleInput}\n            type=\"text\"\n            className=\"input__field\"\n          />\n        </section>\n\n        <section className=\"key__background grid\">\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            7\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            8\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            9\n          </button>\n          <button type=\"button\" onClick={handleDelete} className=\"btn textkeys\">\n            DEL\n          </button>\n\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            4\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            5\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            6\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            +\n          </button>\n\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            1\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            2\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            3\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            -\n          </button>\n\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            .\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            0\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            /\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            x\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={handleReset}\n            className=\"btn textkeys reset\"\n          >\n            RESET\n          </button>\n          <button type=\"submit\" className=\"btn equalkey\">\n            =\n          </button>\n        </section>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
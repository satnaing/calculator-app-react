{"version":3,"sources":["hooks/useLocalStorage.js","App.js","reportWebVitals.js","index.js"],"names":["useLocalStorage","key","initialValue","useState","item","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","value","valueToStore","Function","setItem","stringify","App","theme","setTheme","isDark","setIsDark","inputValue","setInputValue","calStr","setCalStr","useEffect","document","body","classList","add","remove","handleNum","e","val","target","innerText","includes","parseInt","className","onClick","id","onSubmit","preventDefault","x","replace","evaluate","onChange","type","autoFocus","deleteInput","toString","trim","slice","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.38d6d894.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nfunction useLocalStorage(key, initialValue) {\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      // Parse stored json or if none return initialValue\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  });\n  // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n  const setValue = (value) => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore =\n        value instanceof Function ? value(storedValue) : value;\n      // Save state\n      setStoredValue(valueToStore);\n      // Save to local storage\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n  return [storedValue, setValue];\n}\n\nexport default useLocalStorage;\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport { evaluate } from \"mathjs\";\n\nfunction App() {\n  const [theme, setTheme] = useLocalStorage(\"dark-theme\", false);\n  const [isDark, setIsDark] = useState(theme);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [calStr, setCalStr] = useState(\"\");\n\n  useEffect(() => {\n    if (isDark) document.body.classList.add(\"dark-theme\");\n    else document.body.classList.remove(\"dark-theme\");\n  }, [isDark]);\n\n  const handleTheme = () => {\n    setIsDark(!isDark);\n    setTheme(!theme);\n  };\n\n  const handleInput = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleNum = (e) => {\n    const val = e.target.innerText;\n    const nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n    if (nums.includes(parseInt(val))) {\n      if (typeof inputValue === \"number\") {\n        setInputValue(val);\n        setCalStr(\"\");\n      } else {\n        setInputValue(inputValue + val);\n      }\n    } else {\n      setInputValue(` ${inputValue} ${val} `);\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setCalStr(inputValue);\n    let x = inputValue.replace(/x/g, \"*\");\n    setInputValue(evaluate(x));\n  };\n\n  const handleReset = () => {\n    setCalStr(\"\");\n    setInputValue(\"\");\n  };\n\n  const handleDelete = () => {\n    const deleteInput = inputValue.toString().trim().slice(0, -1);\n    setInputValue(deleteInput);\n    setCalStr(\"\");\n  };\n\n  return (\n    <div className=\"main container\">\n      <header>\n        <h1>calc</h1>\n        <div className=\"theme__container\" onClick={handleTheme}>\n          <i className=\"bx bx-sun\"></i>\n          <i\n            className={`bx ${isDark ? \"bx-toggle-right\" : \"bx-toggle-left\"}`}\n            id=\"theme-button\"\n          ></i>\n          <i className=\"bx bx-moon\"></i>\n        </div>\n      </header>\n\n      <form onSubmit={handleSubmit}>\n        <section className=\"input__container\">\n          <span>{calStr}</span>\n          <input\n            value={inputValue}\n            onChange={handleInput}\n            type=\"text\"\n            className=\"input__field\"\n            autoFocus\n          />\n        </section>\n\n        <section className=\"key__background grid\">\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            7\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            8\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            9\n          </button>\n          <button type=\"button\" onClick={handleDelete} className=\"btn textkeys\">\n            DEL\n          </button>\n\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            4\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            5\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            6\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            +\n          </button>\n\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            1\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            2\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            3\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            -\n          </button>\n\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            .\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            0\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            /\n          </button>\n          <button type=\"button\" onClick={handleNum} className=\"btn numkeys\">\n            x\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={handleReset}\n            className=\"btn textkeys reset\"\n          >\n            RESET\n          </button>\n          <button type=\"submit\" className=\"btn equalkey\">\n            =\n          </button>\n        </section>\n      </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}